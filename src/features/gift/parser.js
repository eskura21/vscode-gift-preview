// Generated by PEG.js v0.11.0, https://pegjs.org/

function peg$SyntaxError(message, expected, found, location) {
  this.message = message;
  this.expected = expected;
  this.found = found;
  this.location = location;
  this.name = "SyntaxError";

  // istanbul ignore next
  var exports = {
    name: "SyntaxError",
    message,
    expected,
    found,
    location,
  }
  return exports;
}

peg$SyntaxError.buildMessage = function(expected, found, location) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    },

    not: function(expectation) {
      return "not " + describeExpectation(expectation.expected);
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};

  var peg$startRuleFunctions = { GIFTQuestions: peg$parseGIFTQuestions };
  var peg$startRuleFunction = peg$parseGIFTQuestions;

  var peg$c0 = "$";
  var peg$c1 = "CATEGORY:";
  var peg$c2 = "{";
  var peg$c3 = "}";
  var peg$c4 = "=";
  var peg$c5 = "->";
  var peg$c6 = "true";
  var peg$c7 = "t";
  var peg$c8 = "false";
  var peg$c9 = "f";
  var peg$c10 = "%";
  var peg$c11 = "100";
  var peg$c12 = "#";
  var peg$c13 = "###";
  var peg$c14 = ":";
  var peg$c15 = "..";
  var peg$c16 = "::";
  var peg$c17 = "[";
  var peg$c18 = "html";
  var peg$c19 = "markdown";
  var peg$c20 = "plain";
  var peg$c21 = "moodle";
  var peg$c22 = "]";
  var peg$c23 = "\\";
  var peg$c24 = "~";
  var peg$c25 = ".";
  var peg$c26 = "####";
  var peg$c27 = "//";
  var peg$c28 = " ";
  var peg$c29 = "\t";
  var peg$c30 = "\r\n";
  var peg$c31 = "\n";
  var peg$c32 = "\r";

  var peg$r0 = /^[=~]/;
  var peg$r1 = /^[\-]/;
  var peg$r2 = /^[0-9]/;
  var peg$r3 = /^[.]/;

  var peg$e0 = peg$otherExpectation("Category");
  var peg$e1 = peg$otherExpectation("Description");
  var peg$e2 = peg$literalExpectation("{", false);
  var peg$e3 = peg$literalExpectation("}", false);
  var peg$e4 = peg$otherExpectation("{= match1 -> Match1\n...}");
  var peg$e5 = peg$otherExpectation("{T} or {F} or {True} or {False}");
  var peg$e6 = peg$otherExpectation("{=correct choice ~incorrect choice ... }");
  var peg$e7 = peg$otherExpectation("Essay question { ... }");
  var peg$e8 = peg$otherExpectation("Single short answer { ... }");
  var peg$e9 = peg$otherExpectation("{#... }");
  var peg$e10 = peg$otherExpectation(":: Title ::");
  var peg$e11 = peg$otherExpectation("Question stem");
  var peg$e12 = peg$otherExpectation("(blank line separator)");
  var peg$e13 = peg$otherExpectation("(single line whitespace)");
  var peg$e14 = peg$otherExpectation("(multiple line whitespace)");
  var peg$e15 = peg$otherExpectation("(comment)");

  var peg$f0 = function(questions) { return questions; };
  var peg$f1 = function(cat) {return {type:"Category", title:cat}};
  var peg$f2 = function(title, text) { resetLastQuestionTextFormat(); return {type:"Description", title:title, stem:text, hasEmbeddedAnswers:false} };
  var peg$f3 = function(title, stem1, answers, stem2) {
      
      var embedded = (stem2 !== null);    
      var stem1Text = stem1 ? (stem1.text + (embedded ? " " : "")) : "";

      var format = (stem1 && stem1.format) || (stem2 && stem2.format) || "moodle";
      var text = stem1Text + ( embedded ? "_____ " + stem2.text : "");
      
      var question = {type:answers.type, title:title, stem: {format: format, text: text}, hasEmbeddedAnswers:embedded};
      question = processAnswers(question, answers);
      resetLastQuestionTextFormat();
      return question;
    };
  var peg$f4 = function(matchPairs, globalFeedback) { return { type: "Matching", matchPairs:matchPairs, globalFeedback:globalFeedback }; };
  var peg$f5 = function(matchPairs) { return matchPairs };
  var peg$f6 = function(left, right) { var matchPair = { 
          subquestion:{
            format:(left !== null ? left.format : getLastQuestionTextFormat()), 
            text:(left !== null ? left.text : "")
          }, 
          subanswer:right}; 
          return matchPair };
  var peg$f7 = function(isTrue, feedback, globalFeedback) { return { type:"TF", isTrue: isTrue, feedback:feedback, globalFeedback:globalFeedback}; };
  var peg$f8 = function(isTrue) { return isTrue };
  var peg$f9 = function() {return true};
  var peg$f10 = function() {return false};
  var peg$f11 = function(choices, globalFeedback) { return { type: "MC", choices:choices, globalFeedback:globalFeedback}; };
  var peg$f12 = function(choices) { return choices; };
  var peg$f13 = function(choice, feedback) { var wt = choice[2];
        var txt = choice[4];
        var choice = { isCorrect: (choice[0] == '='), 
                       weight:wt, 
                       text: txt,
                       feedback:feedback };
        return choice };
  var peg$f14 = function(percent) { return parseFloat(percent.join('')) };
  var peg$f15 = function() { return text() };
  var peg$f16 = function(feedback) { return feedback };
  var peg$f17 = function(globalFeedback) { return { type: "Essay", globalFeedback:globalFeedback}; };
  var peg$f18 = function(answer, feedback, globalFeedback) { var choices = [];
      choices.push({isCorrect:true, text:answer, feedback:feedback, weight:null});
      return { type: "Short", choices:choices, globalFeedback:globalFeedback}; };
  var peg$f19 = function(numericalAnswers, globalFeedback) { return { type:"Numerical", 
               choices:numericalAnswers, 
               globalFeedback:globalFeedback}; };
  var peg$f20 = function(choice, feedback) { var symbol = choice[0];
        var wt = choice[1];
        var txt = choice[2];
        var choice = { isCorrect:(symbol == '='), 
                       weight:wt, 
                       text: (txt !== null ? txt : {format:getLastQuestionTextFormat(), text:'*'}), // Moodle unit tests show this, not in documentation
                       feedback: feedback }; 
        return choice };
  var peg$f21 = function(number, range) { var numericAnswer = {type: 'range', number: number, range:range}; return numericAnswer};
  var peg$f22 = function(numberLow, numberHigh) { var numericAnswer = {type: 'high-low', numberHigh: numberHigh, numberLow:numberLow}; return numericAnswer};
  var peg$f23 = function(number) { var numericAnswer = {type: 'simple', number: number}; return numericAnswer};
  var peg$f24 = function(title) { return title.join('') };
  var peg$f25 = function(stem) { setLastQuestionTextFormat(stem.format); // save format for question, for default of other non-formatted text
        return stem };
  var peg$f26 = function(t) {return t};
  var peg$f27 = function(format) {return format};
  var peg$f28 = function(sequence) { return sequence };
  var peg$f29 = function() {return text()};
  var peg$f30 = function(format, txt) { return {
        format:(format!==null ? format : getLastQuestionTextFormat()), 
        text:((format !== "html") 
            ? removeNewLinesDuplicateSpaces(txt.join('').trim())
            : txt.join('').replace(/\r\n/g,'\n'))}};
  var peg$f31 = function(txt) { return removeNewLinesDuplicateSpaces(txt.join('').trim())};
  var peg$f32 = function(chars, frac) { return parseFloat(chars.join('') + frac); };
  var peg$f33 = function(chars) { return "." + chars.join(''); };
  var peg$f34 = function(rt) {return rt;};
  var peg$f35 = function() {return null};
  var peg$f36 = function() { return "EOF"; };

  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$expected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return [peg$savedPos, peg$currPos];
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    return peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    return peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  var peg$VALIDFILENAME = typeof options.filename === "string" && options.filename.length > 0;
  function peg$computeLocation(startPos, endPos) {
    var loc = {};

    if ( peg$VALIDFILENAME ) loc.filename = options.filename;

    var startPosDetails = peg$computePosDetails(startPos);
    loc.start = {
      offset: startPos,
      line: startPosDetails.line,
      column: startPosDetails.column
    };

    var endPosDetails = peg$computePosDetails(endPos);
    loc.end = {
      offset: endPos,
      line: endPosDetails.line,
      column: endPosDetails.column
    };

    return loc;
  }

  function peg$begin() {
    peg$expected.push({ pos: peg$currPos, variants: [] });
  }

  function peg$expect(expected) {
    var top = peg$expected[peg$expected.length - 1];

    if (peg$currPos < top.pos) { return; }

    if (peg$currPos > top.pos) {
      top.pos = peg$currPos;
      top.variants = [];
    }

    top.variants.push(expected);
  }

  function peg$end(invert) {
    var expected = peg$expected.pop();
    var top = peg$expected[peg$expected.length - 1];
    var variants = expected.variants;

    if (top.pos !== expected.pos) { return; }

    if (invert) {
      variants = variants.map(function(e) {
        return e.type === "not" ? e.expected : { type: "not", expected: e };
      });
    }

    Array.prototype.push.apply(top.variants, variants);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found, location),
      expected,
      found,
      location
    );
  }

  function peg$buildError() {
    var expected = peg$expected[0];
    var failPos = expected.pos;

    return peg$buildStructuredError(
      expected.variants,
      failPos < input.length ? input.charAt(failPos) : null,
      failPos < input.length
        ? peg$computeLocation(failPos, failPos + 1)
        : peg$computeLocation(failPos, failPos)
    );
  }

  function peg$parseGIFTQuestions() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseCategory();
    if (s2 === peg$FAILED) {
      s2 = peg$parseDescription();
      if (s2 === peg$FAILED) {
        s2 = peg$parseQuestion();
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseCategory();
        if (s2 === peg$FAILED) {
          s2 = peg$parseDescription();
          if (s2 === peg$FAILED) {
            s2 = peg$parseQuestion();
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parse__();
      peg$savedPos = s0;
      s0 = peg$f0(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCategory() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e0);
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.charCodeAt(peg$currPos) === 36) {
      s2 = peg$c0;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c1) {
        s3 = peg$c1;
        peg$currPos += 9;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsePlainText();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseQuestionSeparator();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f1(s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parseDescription() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e1);
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse__();
    s2 = peg$parseQuestionTitle();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parse_();
    s4 = peg$parseQuestionStem();
    if (s4 !== peg$FAILED) {
      s5 = peg$parseQuestionSeparator();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f2(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parseQuestion() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse__();
    s2 = peg$parseQuestionTitle();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parse_();
    s4 = peg$parseQuestionStem();
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    s5 = peg$parse_();
    rule$expects(peg$e2);
    if (input.charCodeAt(peg$currPos) === 123) {
      s6 = peg$c2;
      peg$currPos++;
    } else {
      s6 = peg$FAILED;
    }
    if (s6 !== peg$FAILED) {
      s7 = peg$parse_();
      s8 = peg$parseMatchingAnswers();
      if (s8 === peg$FAILED) {
        s8 = peg$parseTrueFalseAnswer();
        if (s8 === peg$FAILED) {
          s8 = peg$parseMCAnswers();
          if (s8 === peg$FAILED) {
            s8 = peg$parseNumericalAnswerType();
            if (s8 === peg$FAILED) {
              s8 = peg$parseSingleCorrectShortAnswer();
              if (s8 === peg$FAILED) {
                s8 = peg$parseEssayAnswer();
              }
            }
          }
        }
      }
      if (s8 !== peg$FAILED) {
        s9 = peg$parse_();
        rule$expects(peg$e3);
        if (input.charCodeAt(peg$currPos) === 125) {
          s10 = peg$c3;
          peg$currPos++;
        } else {
          s10 = peg$FAILED;
        }
        if (s10 !== peg$FAILED) {
          s11 = peg$parse_();
          s12 = peg$parseComment();
          if (s12 === peg$FAILED) {
            s12 = peg$parseQuestionStem();
          }
          if (s12 === peg$FAILED) {
            s12 = null;
          }
          s13 = peg$parseQuestionSeparator();
          if (s13 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f3(s2, s4, s8, s12);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMatchingAnswers() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e4);
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseMatches();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseGlobalFeedback();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f4(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parseMatches() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseMatch();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseMatch();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f5(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMatch() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 61) {
      s2 = peg$c4;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseMatchRichText();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c5) {
        s6 = peg$c5;
        peg$currPos += 2;
      } else {
        s6 = peg$FAILED;
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s8 = peg$parsePlainText();
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f6(s4, s8);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTrueFalseAnswer() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e5);
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseTrueOrFalseType();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parseFeedback();
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      s6 = peg$parseFeedback();
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      s4 = [s4, s5, s6];
      s3 = s4;
      s4 = peg$parse_();
      s5 = peg$parseGlobalFeedback();
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f7(s1, s3, s5);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parseTrueOrFalseType() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseTrueType();
    if (s1 === peg$FAILED) {
      s1 = peg$parseFalseType();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f8(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTrueType() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c6) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c7) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f9();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFalseType() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c8) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c9) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f10();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMCAnswers() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e6);
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseChoices();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseGlobalFeedback();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f11(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parseChoices() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseChoice();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseChoice();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f12(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseChoice() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s5 = peg$parseWeight();
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      s6 = peg$parse_();
      s7 = peg$parseRichText();
      if (s7 !== peg$FAILED) {
        s3 = [s3, s4, s5, s6, s7];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseFeedback();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f13(s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWeight() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 37) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (peg$r1.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parsePercentValue();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 37) {
          s3 = peg$c10;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f14(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePercentValue() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    if (input.substr(peg$currPos, 3) === peg$c11) {
      s0 = peg$c11;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (peg$r2.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (peg$r3.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = [];
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          if (peg$r2.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f15();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseFeedback() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c12;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$begin();
      if (input.substr(peg$currPos, 3) === peg$c13) {
        s3 = peg$c13;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
      }
      peg$end(true);
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseRichText();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f16(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEssayAnswer() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e7);
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = '';
    s2 = peg$parse_();
    s3 = peg$parseGlobalFeedback();
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    s4 = peg$parse_();
    peg$savedPos = s0;
    s0 = peg$f17(s3);
    peg$silentFails--;

    return s0;
  }

  function peg$parseSingleCorrectShortAnswer() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e8);
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseRichText();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseFeedback();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      s5 = peg$parseGlobalFeedback();
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      s6 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f18(s1, s3, s5);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parseNumericalAnswerType() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e9);
    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c12;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseNumericalAnswers();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseGlobalFeedback();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f19(s3, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parseNumericalAnswers() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parseMultipleNumericalChoices();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSingleNumericalAnswer();
    }

    return s0;
  }

  function peg$parseMultipleNumericalChoices() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseNumericalChoice();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseNumericalChoice();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f12(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNumericalChoice() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parseWeight();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parseSingleNumericalAnswer();
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      s3 = [s3, s4, s5];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseFeedback();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f20(s2, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSingleNumericalAnswer() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parseNumberWithRange();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNumberHighLow();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNumberAlone();
      }
    }

    return s0;
  }

  function peg$parseNumberWithRange() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseNumber();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c14;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseNumber();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f21(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNumberHighLow() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseNumber();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c15) {
        s2 = peg$c15;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseNumber();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f22(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNumberAlone() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseNumber();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f23(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseQuestionTitle() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e10);
    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c16) {
      s1 = peg$c16;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseTitleText();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseTitleText();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c16) {
          s3 = peg$c16;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f24(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parseQuestionStem() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e11);
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseRichText();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f25(s1);
    }
    s0 = s1;
    peg$silentFails--;

    return s0;
  }

  function peg$parseQuestionSeparator() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e12);
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseEndOfLine();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseBlankLine();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseBlankLine();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseEndOfLine();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$parseEndOfFile();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parseBlankLine() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseSpace();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseSpace();
    }
    s2 = peg$parseEndOfLine();
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTitleText() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$begin();
    if (input.substr(peg$currPos, 2) === peg$c16) {
      s2 = peg$c16;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
    }
    peg$end(true);
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEscapeSequence();
      if (s2 === peg$FAILED) {
        s2 = peg$parseUnescapedChar();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f26(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTextChar() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parseUnescapedChar();
    if (s0 === peg$FAILED) {
      s0 = peg$parseEscapeSequence();
      if (s0 === peg$FAILED) {
        s0 = peg$parseEscapeChar();
      }
    }

    return s0;
  }

  function peg$parseMatchTextChar() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parseUnescapedMatchChar();
    if (s0 === peg$FAILED) {
      s0 = peg$parseEscapeSequence();
      if (s0 === peg$FAILED) {
        s0 = peg$parseEscapeChar();
      }
    }

    return s0;
  }

  function peg$parseFormat() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c18) {
        s2 = peg$c18;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c19) {
          s2 = peg$c19;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c20) {
            s2 = peg$c20;
            peg$currPos += 5;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c21) {
              s2 = peg$c21;
              peg$currPos += 6;
            } else {
              s2 = peg$FAILED;
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c22;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f27(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEscapeChar() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    if (input.charCodeAt(peg$currPos) === 92) {
      s0 = peg$c23;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEscapeSequence() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseEscapeChar();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEscapeChar();
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 126) {
            s2 = peg$c24;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s2 = peg$c4;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 35) {
                s2 = peg$c12;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 91) {
                  s2 = peg$c17;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                }
                if (s2 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s2 = peg$c22;
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                  }
                  if (s2 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 123) {
                      s2 = peg$c2;
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                    }
                    if (s2 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s2 = peg$c3;
                        peg$currPos++;
                      } else {
                        s2 = peg$FAILED;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f28(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUnescapedChar() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$begin();
    s2 = peg$parseEscapeSequence();
    if (s2 === peg$FAILED) {
      s2 = peg$parseControlChar();
      if (s2 === peg$FAILED) {
        s2 = peg$parseQuestionSeparator();
      }
    }
    peg$end(true);
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f29();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUnescapedMatchChar() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$begin();
    s2 = peg$parseEscapeSequence();
    if (s2 === peg$FAILED) {
      s2 = peg$parseControlChar();
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c5) {
          s2 = peg$c5;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseQuestionSeparator();
        }
      }
    }
    peg$end(true);
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f29();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseControlChar() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    if (input.charCodeAt(peg$currPos) === 61) {
      s0 = peg$c4;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 126) {
        s0 = peg$c24;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s0 = peg$c12;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s0 = peg$c2;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s0 = peg$c3;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 92) {
                s0 = peg$c23;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s0 = peg$c14;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseMatchRichText() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseFormat();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    s3 = [];
    s4 = peg$parseMatchTextChar();
    if (s4 !== peg$FAILED) {
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseMatchTextChar();
      }
    } else {
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f30(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRichText() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseFormat();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    s3 = [];
    s4 = peg$parseTextChar();
    if (s4 !== peg$FAILED) {
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseTextChar();
      }
    } else {
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f30(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePlainText() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseTextChar();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseTextChar();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f31(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNumber() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNumberFraction();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f32(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNumberFraction() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c25;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$begin();
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c25;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      peg$end(true);
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$r2.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f33(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGlobalFeedback() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c26) {
      s1 = peg$c26;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseRichText();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f34(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e13);
    peg$silentFails++;
    s0 = [];
    s1 = peg$parseSpace();
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      s2 = peg$parseEndOfLine();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$begin();
        s4 = peg$parseBlankLine();
        peg$end(true);
        if (s4 === peg$FAILED) {
          s3 = undefined;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseSpace();
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseEndOfLine();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$begin();
          s4 = peg$parseBlankLine();
          peg$end(true);
          if (s4 === peg$FAILED) {
            s3 = undefined;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parse__() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e14);
    peg$silentFails++;
    s0 = [];
    s1 = peg$parseComment();
    if (s1 === peg$FAILED) {
      s1 = peg$parseEndOfLine();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSpace();
      }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseComment();
      if (s1 === peg$FAILED) {
        s1 = peg$parseEndOfLine();
        if (s1 === peg$FAILED) {
          s1 = peg$parseSpace();
        }
      }
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parseComment() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e15);
    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c27) {
      s1 = peg$c27;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$begin();
      s5 = peg$parseEndOfLine();
      peg$end(true);
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$begin();
        s5 = peg$parseEndOfLine();
        peg$end(true);
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s3 = peg$currPos;
      peg$begin();
      s4 = peg$parseEndOfLine();
      if (s4 === peg$FAILED) {
        s4 = peg$parseEndOfFile();
      }
      peg$end(false);
      if (s4 !== peg$FAILED) {
        peg$currPos = s3;
        s3 = undefined;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f35();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parseSpace() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c28;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 9) {
        s0 = peg$c29;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseEndOfLine() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    if (input.substr(peg$currPos, 2) === peg$c30) {
      s0 = peg$c30;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c31;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c32;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseEndOfFile() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$begin();
    if (input.length > peg$currPos) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    peg$end(true);
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f36();
    }
    s0 = s1;

    return s0;
  }


    var defaultFormat = "moodle"; // default format - the GIFT specs say [moodle] is default, but not sure what that means for other applications
    var format = defaultFormat;
    function processAnswers(question, answers) {
      question.globalFeedback = answers.globalFeedback;
      switch(question.type) {
        case "TF":
          question.isTrue = answers.isTrue;
          question.incorrectFeedback = answers.feedback[1];
          question.correctFeedback = answers.feedback[2];
          break;
        case "MC":
        case "Numerical":
        case "Short":
          question.choices = answers.choices;
          break;
        case "Matching":
          question.matchPairs = answers.matchPairs;
          break;
      }
      // check for MC that's actually a short answer (all correct answers)
      if (question.type == "MC" && areAllCorrect(question.choices)) {
        question.type = "Short";
      } 
      return question;
    }
    function areAllCorrect(choices) {
      var allAreCorrect = true;
      for (var i = 0; i < choices.length; i++) {
        allAreCorrect &= choices[i].isCorrect;
      }
      return allAreCorrect;
    }
    function removeNewLinesDuplicateSpaces(text) {
      text = text.replace(/[\n\r]/g,' '); // replace newlines with spaces
      return text.replace(/\s\s+/g,' '); 
    }
    function setLastQuestionTextFormat(fmt) {
      format = fmt;
    }
    function getLastQuestionTextFormat() {
      return format;
    }
    function resetLastQuestionTextFormat() {
      format = defaultFormat;
    }


  peg$begin();
  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return { type: "result", result: peg$result };
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$expect(peg$endExpectation());
    }

    return { type: "error", result: peg$buildError() };
  }
}

export {
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};

export default {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};